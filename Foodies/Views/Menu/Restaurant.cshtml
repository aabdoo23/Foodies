@model IEnumerable<Restaurant>


<html>
    <header>
            <title>Restaurant List</title>
                <link rel="stylesheet" href="~/css/restaurant.css">
    @* <link rel="stylesheet" href="~/css/Navbar.css"> *@
                <link rel="stylesheet" href="~/css/Main.css">


    @* <nav class="navbar navbar-expand-lg">
    <div class="container-fluid">
        <div class="navbar-header">
            <a class="navbar-brand" href="#">
                <i class="fa-solid fa-utensils"></i>
                <b>Foodies</b>
            </a>
        </div>
        <div class="search-section">
            <div class="search-group">
                <svg class="search-icon" aria-hidden="true" viewBox="0 0 24 24">
                    <g>
                        <path
                            d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z">
                        </path>
                    </g>
                </svg>
                <input placeholder="Search" type="search" class="search-input">
            </div>
        </div>
            @* <div class="navbar-right">
            <div class="radio-inputs">
                <label class="radio">
                    <input type="radio" name="radio" checked="">
                    <span class="name">Delivery</span>
                </label>
                <label class="radio">
                    <input type="radio" name="radio">
                    <span class="name">Pickup</span>
                </label>
            </div> 

            @await Component.InvokeAsync("RedButtonViewComponent", new { Text = "Cart", Icon = "shopping-cart", Url = "www.google.com" })
            @await Component.InvokeAsync("ButtonViewComponent", new { Text = "1412 Points", Icon = "medal", Url = "www.google.com" })
            @await Component.InvokeAsync("ButtonViewComponent", new { Text = "Welcome, User", Icon = "user", Url = "" })
        </div>
    </div>
</nav> *@

</header>
<body>

   <div class="category-bar d-flex justify-content-center">
    <div class="category-item" data-category="Burger">
        <button class="category-button">Burger</button>
    </div>
    <div class="category-item" data-category="Pizza">
        <button class="category-button">Pizza</button>
    </div>
    <div class="category-item" data-category="Desserts">
        <button class="category-button">Desserts</button>
    </div>
    <div class="category-item" data-category="Drinks">
        <button class="category-button">Drinks</button>
    </div>
    <!-- Add more categories similarly -->
</div>


    <div class="home-section">
        <div class="home-section-top">
            <div class="home-section-title">Recommended</div>
            <div class="home-section-top-right">
                @await Component.InvokeAsync("RedButtonViewComponent", new { Text = "0 L.E - 300 L.E", Icon = "filter", Url = "" })
                @await Component.InvokeAsync("RedButtonViewComponent", new { Text = "User Profile", Icon = "pepper-hot", Url = $"/Home/UserView/{(@ViewBag.cusid)}" })
              

            </div>
        </div>
        
        @* restaurants *@
        <div class="restaurant-list">
        <h1>Restaurants</h1>
        <div class="restaurant-cards">
                @foreach (var restaurant in Model)
                {
                    @await Component.InvokeAsync("FoodCardViewComponent",
                                 new
                                 {
                                     Id = restaurant.Id,
                                     Title = restaurant.Name,
                                     Hotline = restaurant.Hotline,
                                     CuisineType = restaurant.CuisineType,
                                     MinPrice = restaurant.MinPrice,
                                     MaxPrice = restaurant.MaxPrice,
                                     ImageUrl = restaurant.Photo,
                                     Customer = ViewBag.fav,
                                     Url = $"/Menu/Index?restaurantId={restaurant.Id}"
                                 }
                             )

            <div class="rating-container">
                <button class="btn btn-warning btn-sm rate-restaurant" data-restaurant-id="@restaurant.Id">
                    Rate Restaurant
                </button>
                <div class="rating-input" style="display: none;">
                    <input type="number" min="1" max="5" step="0.1" placeholder="Rate (1-5)" class="form-control" />
                    <button class="btn btn-primary submit-rating" data-restaurant-id="@restaurant.Id">
                        Submit
                    </button>
                </div>
            </div>
               }
</div>

      @*      <div class="restaurant-cards">
                @foreach (var restaurant in Model)
                {
                    <div class="restaurant-card" data-cuisine-type="@restaurant.CuisineType">
                        @await Component.InvokeAsync("FoodCardViewComponent",
                            new
                            {
                                Id = restaurant.Id,
                                Title = restaurant.Name,
                                Hotline = restaurant.Hotline,
                                CuisineType = restaurant.CuisineType,
                                MinPrice = restaurant.MinPrice,
                                MaxPrice = restaurant.MaxPrice,
                                ImageUrl = restaurant.Photo,
                                Customer = ViewBag.fav,
                                Url = $"/Menu/Index?restaurantId={restaurant.Id}",
                            })
                    </div>
                }
            </div>

    </div>*@
        @* @foreach (var restaurant in Model)
        {
                    <div class="restaurant-card">
                        <img src="@restaurant.Photo" alt="@restaurant.Name" class="restaurant-image" />
                        <div class="restaurant-info">
                            <h2 class="restaurant-name">@restaurant.Name</h2>
                            <a asp-controller="Menu" asp-action="Index" asp-route-restaurantId="@restaurant.Id" class="view-menu-btn">View Menu</a>
                        </div>
                    </div>
        } *@

    </div>


    <script src="~/js/rate.js"></script>
</body>

</html>

<style>

    /* html,body{
        background-color: var(--secondary-color); 
    } */
   .restaurant-list h1{
    color:white;
    }


    .navbar-brand {
        font-size: 1.5em;
        color: var(--primary-color);
    }

    .navbar-right {
        display: flex;
        align-items: center;
        align-self: end;
    }

    .navbar-nav {
        display: flex;
        align-items: center;
        list-style: none;
        padding-left: 0;
    }

    .navbar-nav li {
        margin-left: 15px;
    }

    .form-control,
    .btn-group,
    .form-select {
        margin: 0 10px;
    }

    .category-bar {
        margin-top: 80px;
        display: flex;
        padding: 10px;
        border-bottom: 1px solid #e5e5e5;
        overflow-x: auto;

    }

    /*Search*/
    .search-section {
    @*display:flex;*@
    align-items: center;
        margin-right: 10px;
        margin-left: 10px;


    }

    .search-group {
        display: flex;
        line-height: 28px;
        align-items: right;
        margin-right: 10px;
        margin-left: 10px;
        width: 100%;
        position: relative;
    }

    .search-input {
        width: 100%;
        height: 40px;
        line-height: 28px;
        /* padding: 0 1rem;
        padding-left: 2.5rem; */
        border: 2px solid transparent;
        border-radius: 10px;
        outline: none;
        background-color: var(--white);
        color: var(--black);
        transition: .3s ease;
        padding: 0px 100px;
    }

    .search-input::placeholder {
        color: var(--primary-color);
        font-weight: 400;
    }

    .search-input:focus,
    search-input:hover {
        outline: none;
        border-color: var(--teirtary-color);
        background-color: #fff;
        box-shadow: 0 0 0 4px var(--primary-color) /10%;
    }

    .search-icon {
        position: absolute;
        left: 1rem;
        fill: var(--primary-color);
        width: 1rem;
        height: 1rem;
    }


    /* From Uiverse.io by Yaya12085 */
    .radio-inputs {
        position: relative;
        display: flex;
        flex-wrap: wrap;
        border-radius: 10px;
        background-color: var(--teirtary-color);
        box-sizing: border-box;
        box-shadow: 0 0 0px 1px rgba(0, 0, 0, 0.06);
        padding: 0.25rem;
        width: 200px;
        margin-right: 10px;
        font-size: 14px;
        font-weight: 400;
    }

    .radio-inputs .radio {
        flex: 1 1 auto;
        text-align: center;
    }

    .radio-inputs .radio input {
        display: none;
    }

    .radio-inputs .radio .name {
        display: flex;
        cursor: pointer;
        align-items: center;
        justify-content: center;
        border-radius: 0.5rem;
        border: none;
        padding: .5rem 0;
        color: var(--white);
        transition: all .15s ease-in-out;
    }

    .radio-inputs .radio input:checked+.name {
        background-color: var(--primary-color);
        font-weight: 700;
    }

    .home-section-items {
        display: flex;
        flex-wrap: wrap;
        padding: 10px;
    }

    .home-section-title {
        font-size: 1.5em;
        font-weight: 700;
        color: var(--black);
    }
    .home-section-top {
        display: flex;
        justify-content: space-between;
        padding: 10px 10px 0 10px;
    }
</style>



     <script>
            document.querySelectorAll('.category-item button').forEach(item => {
                item.addEventListener('click', function(event) {
                    event.preventDefault();  // Prevent the page from refreshing
                    var selectedCategory = this.closest('.category-item').getAttribute('data-category');
                    var restaurantCards = document.querySelectorAll('.restaurant-card');
                    restaurantCards.forEach(card => {
                        var cuisineType = card.getAttribute('data-cuisine-type');
                        if (cuisineType === selectedCategory || selectedCategory === 'All') {
                            card.style.display = 'block'; 
                        } else {
                            card.style.display = 'none';
                        }
                    });
                });
            });
        </script>