@model IEnumerable<Restaurant>

<html>
<head>
    <title>Restaurant List</title>
    <link rel="stylesheet" href="~/css/restaurant.css">
    <link rel="stylesheet" href="~/css/Main.css">
</head>

<body>
    <br /><br />
    <div class="category-bar d-flex justify-content-center">
        @{
            var ef = Model.Select(r => r.CuisineType).Distinct();
            foreach (var i in ef)
            {
                        <div class="category-item" data-category="@i">
                            <button class="category-button">@i</button>
                        </div>
            }
        }
    </div>

    <div class="search-section">
        <div class="search-group">
            <input id="restaurantSearch" placeholder="Search" type="search" class="search-input">
        </div>
    </div>

    <div class="restaurant-cards">
        @foreach (var restaurant in Model)
        {
                <div class="restaurant-card" data-cuisine-type="@restaurant.CuisineType">
                    <div class="restaurant-name">@restaurant.Name</div>
                @await Component.InvokeAsync("FoodCardViewComponent", new
                    {
                        Id = restaurant.Id,
                        Title = restaurant.Name,
                        Hotline = restaurant.Hotline,
                        CuisineType = restaurant.CuisineType,
                        MinPrice = restaurant.MinPrice,
                        MaxPrice = restaurant.MaxPrice,
                        ImageUrl = restaurant.Photo,
                        Customer = ViewBag.fav,
                        Url = $"/Menu/Index?restaurantId={restaurant.Id}"
                    })

                    <div class="rating-container">
                        <button class="btn btn-warning btn-sm rate-restaurant" data-restaurant-id="@restaurant.Id">Rate Restaurant</button>
                        <div class="rating-input" style="display: none;">
                            <input type="number" min="1" max="5" step="0.1" placeholder="Rate (1-5)" class="form-control" />
                            <button class="btn btn-primary submit-rating" data-restaurant-id="@restaurant.Id">Submit</button>
                        </div>
                    </div>
                </div>
        }
    </div>

</body>
</html>

<script>
    document.querySelectorAll('.category-item button').forEach(item => {
        item.addEventListener('click', function(event) {
            event.preventDefault();
            var selectedCategory = this.closest('.category-item').getAttribute('data-category');
            var restaurantCards = document.querySelectorAll('.restaurant-card');

            restaurantCards.forEach(card => {
                var cuisineType = card.getAttribute('data-cuisine-type');
                if (cuisineType === selectedCategory || selectedCategory === 'All') {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    });

    document.getElementById('restaurantSearch').addEventListener('input', function() {
        var searchQuery = this.value.toLowerCase();
        var restaurantCards = document.querySelectorAll('.restaurant-card');

        restaurantCards.forEach(card => {
            var restaurantName = card.querySelector('.restaurant-name').textContent.toLowerCase();
            if (restaurantName.includes(searchQuery)) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        const rateButtons = document.querySelectorAll('.rate-restaurant');

        rateButtons.forEach(button => {
            button.addEventListener('click', function () {
                const ratingInput = this.nextElementSibling;
                ratingInput.style.display = ratingInput.style.display === 'none' ? 'flex' : 'none';
            });
        });

        const submitButtons = document.querySelectorAll('.submit-rating');

        submitButtons.forEach(button => {
            button.addEventListener('click', async function () {
                const restaurantId = this.getAttribute('data-restaurant-id');
                const ratingValue = this.previousElementSibling.value;

                if (ratingValue) {
                    const response = await fetch(`/Menu/AddRating`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ RestaurantId: restaurantId, Rate: parseFloat(ratingValue) })
                    });

                    if (response.ok) {
                        alert('Thank you for your rating!');
                        location.reload();
                    } else {
                        alert('An error occurred while submitting your rating.');
                    }
                } else {
                    alert('Please enter a rating.');
                }
            });
        });
    });
</script>

<style>
.category-button {
    background-color: #b6200c;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px; 
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease; 
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); 
    margin: 5px;
}

.category-button:hover {
    background-color: #b6200c; 
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
}

.category-button:active {
    background-color: #b6200c; 
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transform: translateY(2px);
}

.search-section {
    display: flex;
    justify-content: center;
    margin: 20px 0;
}

.search-group {
    position: relative; 
    width: 100%;
    max-width: 500px;
}

.search-input {
    width: 100%; 
    padding: 12px 20px; 
    font-size: 16px;
    border: 2px solid #3498db;
    border-radius: 25px;
    outline: none; 
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    transition: border-color 0.3s ease, box-shadow 0.3s ease; 
}

.search-input::placeholder {
    color: #7f8c8d;
    font-style: italic; 
}

/* Focus Effect */
.search-input:focus {
    border-color: #2980b9;
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15); 
}

.search-group::before {
    content: '\f002';
    font-family: 'FontAwesome';
    position: absolute;
    left: 15px; 
    top: 50%;
    transform: translateY(-50%);
    color: #7f8c8d;
    font-size: 16px;
}

.rating-container {
    margin-top: 10px;
    display: flex; 
    align-items: center;
}

.rating-input {
    display: flex;
    align-items: center;
    margin-left: 10px;
}

.form-control {
    width: 80px; 
    padding: 5px;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-right: 5px; 
}

.submit-rating {
    margin-left: 5px;
}
</style>
